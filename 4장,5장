## 4장 변수

메모리는 데이터를 저장할 수 있는 메모리 셀의 집합체 이다.<br/>
각 셀은 고유의 메모리 주소를 갖는데 이 메모리 주소는 메모리 공간의 위치를 나타내어 준다.<br/>
10+20; 을 계산할 경우 30이란 값이 나오게 되지만 그 값을 재사용 할 수 없다.<br/>
30이란 값이 저장되어있는 주소를 불러와야 하는 데 그 주소는 코드가 실행될 때마다 바뀌기 때문에 특정주소값을 가져와서 사용할 수 없다.<br/>
따라서 우리는 '변수' 라는 친구를 써주어야 하는데<br/>
변수란 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.(값의 위치를 가리키는 상징적인 이름)<br/>
<br/>
할당(대입,저장) : 변수에 값을 저장하는 것<br/>
참조 : 변수에 저장된 값을 읽어들이는 것<br/>
선언 : 변수를 사용하기 위해 선언해주는 것. var,let,const를 사용한다.<br/>
초기화 : 변수 선언 이후 최초로 값을 할당하는 것<br/>
<br/>
```
console.log(score);
var score;
```
자바스크립트 코드는 인터프리터에 의해 한 줄씩 순차적으로 실행되기 때문에 참조 오류가 나야하지만 나지않는데<br/>
자바스크립트 엔진이 변수 선언을 퐣ㅁ한 모든 선언문을 소스코드에서 찾아내 먼저 실행하기 때문이다.<br/>
소스코드의 평가과정이 끝나면 비로소 변수 선언을 포함한 모든 선언문을 제외하고 소스코드를 한 줄씩 순차적으로 실행한다.<br/>

변수 호이스팅 : 변수 선언문이 코드의 선두로 끌어올려진 것처럼 동작하는 자바스크립트 고유의 특징<br/>
상수 : 값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없는 값<br/>
<br/><br/>


### 네이밍 컨벤션

카멜 케이스<br/>
```var firstName;```<br/>

스네이크 케이스<br/>
```var first_name;```<br/>

파스칼 케이스<br/>
```var FirstName;```<br/>

블록레벨 스코프, 함수레벨 스코프<br/>

![image](https://user-images.githubusercontent.com/105151560/183401926-720194b6-fcf3-425e-a9b6-28191afa6d93.png)


<br/><br/>
## 5장 표현식과 문

값 : 식이 평가되어 생성된 결과<br/>
평가 : 식을 해석해서 값을 생성하거나 참조하는 것을 의미<br/>

리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법<br/>

표현식 : 값으로 평가될 수 있는 문. 표현식이 평가되면 새로운 값을 생성하거나 기존 값을 참조한다.(리터럴도 표현식이다.)<br/>

문 : 프로그램을  기본 단위이자 초소 실행단위.<br/>
```
var sum = 1+2;
```
<br/>
토큰 : 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본 요소를 의미한다.<br/>
      (문법적인 의미란 기워드, 식별자, 연산자, 리터럴, 세미콜론(;), 마침표(.) 등으로 더 이상 나눌 수 없는 코드의 기본 요소이다.)<br/>

문의 종류로는 선언문, 할당문, 조건문, 반복문 등이 있다.<br/>

표현식은 문의 일부일 수도 있고 그 자체로 문이 될 수도 있다.<br/>
선언문 : 표현식이 아니다.<br/>
할당문 : 표현식이다.<br/>
조건문, 반복문 : 표현식이 아니다,,,??<br/>


#### 표현식 범주
산술 : 숫자로 평가 => 산술연산자 사용 <br/>
문자열 : "React" 또는 "234"와 같은 문자열로 평가=> 문자열 연산자 사용<br/>
논리적 : 참 또는 거짓으로 평가 => 논리연산자 포함<br/>
기본 표현식 : JavaScript의 기본 키워드 및 일반 표현식<br/>
왼쪽 표현식 : 왼쪽 값은 할당대상<br/>

기본표현식 : this<br/>
```this.property```<br/>
왼쪽표현식 : new연산자를 사용하여 사용자 정의 개채 유형 또는 기본 제공 개체 유형중 하나의 인스턴스를 만들 수 있다<br/>
```var object = new object([param1],paramp2,...,param3]);```<br/>
